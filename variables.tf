variable "ddb_autoscale_read_schedule" {
  type = list(object({
    schedule     = string
    min_capacity = number
    max_capacity = number
  }))
  description = "Provides an DynamoDB autoscaling scheduled action resource"
  default     = []
}

variable "ddb_autoscale_write_schedule" {
  type = list(object({
    schedule     = string
    min_capacity = number
    max_capacity = number
  }))
  description = "Provides an DynamoDB autoscaling scheduled action resource"
  default     = []
}

variable "ddb_billing_mode" {
  type        = string
  default     = "PROVISIONED"
  description = "The billing mode for the DDB table"
}

variable "label_orders" {
  type = object({
    iam   = optional(list(string)),
    ddb   = optional(list(string)),
    redis = optional(list(string)),
  })
  default     = {}
  description = "Overrides the `labels_order` for the different labels to modify ID elements appear in the `id`"
}

variable "redis_cpu_size" {
  type        = number
  default     = 25
  description = "The cpu size of the redis instance"
}

variable "redis_deployment_maximum_percent" {
  type        = number
  description = "The upper limit of the number of tasks (as a percentage of `desired_count`) that can be running in a service during a deployment"
  default     = 100
}

variable "redis_deployment_minimum_healthy_percent" {
  type        = number
  description = "The lower limit (as a percentage of `desired_count`) of the number of tasks that must remain running and healthy in a service during a deployment"
  default     = 0
}

variable "redis_desired_count" {
  type        = number
  description = "The desired count for the redis service. When using github.com/justtrackio/gosoline kvstore implementation it is currently suggested to use the default '1'"
  default     = 1
}

variable "redis_ecs_cluster_arn" {
  type        = string
  description = "The arn of the ecs cluster to spawn the redis instance in"
  default     = null
}

variable "redis_enabled" {
  default     = true
  type        = bool
  description = "Defines if redis is to be used or not"
}

variable "redis_image_repository" {
  type        = string
  description = "Redis image repository to use when use_redis is true"
  default     = "redis"
}

variable "redis_image_tag" {
  type        = string
  description = "Redis image tag to use when use_redis is true"
  default     = "7-alpine"
}

variable "redis_launch_type" {
  type        = string
  description = "The launch type on which to run your service. Valid values are `EC2` and `FARGATE`"
  default     = "EC2"
}

variable "redis_memory_size" {
  type        = string
  default     = "25"
  description = "The memory size of the redis instance"
}

variable "redis_network_mode" {
  default     = null
  description = "The networking mode used for task, can be null or awsvpc"
  type        = string
}

variable "redis_propagate_tags" {
  type        = string
  description = "Specifies whether to propagate the tags from the task definition or the service to the tasks. The valid values are SERVICE and TASK_DEFINITION"
  default     = "SERVICE"
}

variable "redis_service_discovery_dns_namespace_id" {
  type        = string
  description = "ID of the aws service discovery dns namespace (generated by the terraform-aws-ocean-ecs module, visible in Cloud Map)"
  default     = null
}

variable "redis_service_discovery_name" {
  type        = string
  default     = null
  description = "Name for the service discovery entry in cloudmap"
}

variable "redis_service_memory_size" {
  type        = number
  default     = 50
  description = "The memory size of the ECS container"
}

variable "redis_service_placement_constraints" {
  type = set(object({
    type       = string
    expression = string
  }))
  default     = null
  description = "service placement constraints for redis service, will set 'type = \"memberOf\"' and expression = \"attribute:spotinst.io/container-instance-lifecycle==od\" when environment == \"prod\" for stability when this var is unset"
}

variable "redis_vpc_id" {
  type        = string
  default     = null
  description = "ID of the aws vpc in which to spawn the redis service"
}
